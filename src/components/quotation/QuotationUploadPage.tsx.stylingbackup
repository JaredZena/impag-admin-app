import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { apiRequest } from '@/utils/api';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface Category {
  id: number;
  name: string;
}

interface ProcessingResult {
  supplier: string;
  products_processed: number;
  supplier_products_created: number;
  skus_generated: Array<{
    product_name: string;
    variant_sku: string;
    base_sku: string;
    ai_suggested: string;
    category_id: number;
  }>;
}

const QuotationUploadPage: React.FC = () => {
  const navigate = useNavigate();
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [categories, setCategories] = useState<Category[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [result, setResult] = useState<ProcessingResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);

  // Fetch categories on component mount
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await apiRequest('/categories');
        setCategories(response.data || []);
      } catch (err) {
        console.error('Failed to fetch categories:', err);
        setError('Error al cargar categor√≠as. Puedes subir sin seleccionar una categor√≠a.');
      }
    };

    fetchCategories();
  }, []);

  const handleFileSelect = (file: File) => {
    // Define supported file types
    const supportedTypes = [
      'application/pdf',
      'image/png',
      'image/jpeg',
      'image/jpg',
      'image/gif',
      'image/bmp',
      'image/tiff',
      'image/webp'
    ];
    
    if (!supportedTypes.includes(file.type)) {
      setError('Por favor selecciona un archivo PDF o imagen (PNG, JPG, JPEG, GIF, BMP, TIFF, WEBP).');
      return;
    }
    
    setSelectedFile(file);
    setError(null);
    setResult(null);
  };

  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      handleFileSelect(file);
    }
  };

  const handleDragOver = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(false);
    
    const file = event.dataTransfer.files?.[0];
    if (file) {
      handleFileSelect(file);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('file', selectedFile);
      
      if (selectedCategory) {
        formData.append('category_id', selectedCategory);
      }

      const response = await apiRequest('/quotations/process', {
        method: 'POST',
        body: formData,
        headers: {
          // Don't set Content-Type, let the browser set it for FormData
        },
      });

      setResult(response);
      console.log('Upload successful:', response);
    } catch (err: any) {
      console.error('Upload failed:', err);
      
      // Extract error message
      const errorMessage = err?.message || err?.detail || 'Error al procesar el archivo';
      setError(`Error: ${errorMessage}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleReset = () => {
    setSelectedFile(null);
    setSelectedCategory('');
    setResult(null);
    setError(null);
  };

  return (
    <div className="w-screen min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-teal-50 overflow-x-hidden">
      <div className="container mx-auto max-w-4xl px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-green-700 to-emerald-600 bg-clip-text text-transparent mb-2 text-center">
            Subir Cotizaci√≥n
          </h1>
          <p className="text-gray-600 text-center">Sube cotizaciones de proveedores (PDF o im√°genes) para extraer autom√°ticamente productos y precios</p>
        </div>

        <Card className="p-6 mb-6 shadow-lg border-0 rounded-xl">
          <div className="mb-6">
            <div
              className={`border-2 border-dashed rounded-lg p-12 text-center cursor-pointer transition-all duration-200 ${
                isDragOver 
                  ? 'border-blue-500 bg-blue-50' 
                  : selectedFile 
                    ? 'border-green-500 bg-green-50' 
                    : 'border-gray-300 bg-white hover:border-blue-500 hover:bg-blue-50'
              }`}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
              onClick={() => document.getElementById('file-input')?.click()}
            >
              <div className="text-5xl mb-4">
                {selectedFile?.type.startsWith('image/') ? 'üñºÔ∏è' : 'üìÑ'}
              </div>
              {selectedFile ? (
                <>
                  <div className="text-lg font-medium text-gray-700 mb-2">{selectedFile.name}</div>
                  <div className="text-sm text-gray-500">{(selectedFile.size / 1024 / 1024).toFixed(2)} MB</div>
                </>
              ) : (
                <>
                  <div className="text-lg font-medium text-gray-700 mb-2">
                    {isDragOver ? 'Suelta el archivo aqu√≠' : 'Haz clic para seleccionar o arrastra un archivo'}
                  </div>
                  <div className="text-sm text-gray-500">
                    <div>Formatos: PDF, PNG, JPG, JPEG, GIF, BMP, TIFF, WEBP</div>
                    <div>Tama√±o m√°ximo: 10MB</div>
                  </div>
                </>
              )}
              <input
                id="file-input"
                type="file"
                accept=".pdf,.png,.jpg,.jpeg,.gif,.bmp,.tiff,.webp"
                onChange={handleFileInputChange}
                className="hidden"
              />
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">Categor√≠a de Producto (Opcional)</label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-gray-900 appearance-none"
            >
              <option value="">Seleccionar categor√≠a (la IA elegir√° autom√°ticamente si no se especifica)</option>
              {categories.map((category) => (
                <option key={category.id} value={category.id.toString()}>
                  {category.name}
                </option>
              ))}
            </select>
          </div>

          <div className="flex gap-3">
            <Button
              onClick={handleUpload}
              disabled={!selectedFile || isProcessing}
              className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white py-3 px-6 text-lg"
            >
              {isProcessing ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  Procesando...
                </div>
              ) : (
                'Procesar Cotizaci√≥n'
              )}
            </Button>
            
            {(selectedFile || result || error) && (
              <Button
                onClick={handleReset}
                variant="outline"
                className="px-6 py-3"
              >
                Limpiar
              </Button>
            )}
          </div>
        </Card>

        {error && (
          <Card className="p-4 mb-6 border-red-200 bg-red-50">
            <div className="text-red-700">{error}</div>
          </Card>
        )}

        {result && (
          <Card className="p-6 shadow-lg border-0 rounded-xl">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Resultado del Procesamiento</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-sm text-gray-500 mb-1">Proveedor</div>
                <div className="text-xl font-semibold text-gray-800">{result.supplier}</div>
              </div>
              
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-sm text-gray-500 mb-1">Productos Procesados</div>
                <div className="text-xl font-semibold text-gray-800">{result.products_processed}</div>
              </div>
              
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <div className="text-sm text-gray-500 mb-1">Relaciones Creadas</div>
                <div className="text-xl font-semibold text-gray-800">{result.supplier_products_created}</div>
              </div>
            </div>

            {result.skus_generated && result.skus_generated.length > 0 && (
              <>
                <h3 className="text-lg font-medium text-gray-800 mb-3">Productos Creados/Actualizados</h3>
                <div className="space-y-3 mb-6">
                  {result.skus_generated.map((product, index) => (
                    <div key={index} className="p-4 bg-gray-50 rounded-lg border-l-4 border-green-500">
                      <div className="font-medium text-gray-800">{product.product_name}</div>
                      <div className="text-sm text-gray-600 mt-1">
                        SKU: {product.variant_sku} | Base: {product.base_sku}
                      </div>
                      {product.ai_suggested !== 'N/A' && (
                        <div className="text-xs text-gray-500 mt-1">
                          IA Sugiri√≥: {product.ai_suggested}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </>
            )}

            <div className="flex gap-3">
              <Button 
                onClick={() => navigate('/product-admin')}
                className="bg-green-600 hover:bg-green-700 text-white"
              >
                Ver Productos
              </Button>
              <Button 
                onClick={() => navigate('/suppliers')}
                variant="outline"
              >
                Ver Proveedores
              </Button>
              <Button 
                onClick={handleReset}
                variant="outline"
              >
                Procesar Otro Archivo
              </Button>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
};

export default QuotationUploadPage;
